{% extends 'base.html.twig' %}

{% block body %}
    <div class="row">
        <div class="col">
            <h4>Located at: {{ assetStorage.location }}</h4>
        </div>
        <div class="col text-end">
            {{ render(controller('App\\Controller\\StorageModerationController::renderModerationButton', {id: assetStorage.id})) }}
        </div>
    </div>
    <div class="row">
        {% include 'asset_storage/storage_parts/storage.html.twig' with storageData %}
{#        {{ storageRender|raw }}#}
    </div>
    <div class="container-fluid">
        <p class="text-right">
            {% for counts in storageCounts %}
                 <strong>{{ counts.collected }}</strong> / {{ counts.total }}
            {% endfor %}
        </p>
    </div>
    {% set assignedSlots = [] %}
    {% set assignedSlotsInfo = [] %}
    {% for collectedAsset in collectedAssets %}
        {% set assignedSlots = assignedSlots|merge([collectedAsset.slot]) %}
        {% set assignedSlotsInfo = assignedSlotsInfo|merge([{
            user: collectedAsset.user,
            slot: collectedAsset.slot,
            asset: collectedAsset.asset,
            note: collectedAsset.note,
            checkedOut: collectedAsset.checkedOut,
            processed: collectedAsset.processed,
            usersName: collectedAsset.usersName,
            hasRepair: collectedAsset.hasRepair,
            repairId: collectedAsset.repairId
        }]) %}
    {% endfor %}
    <div class="js-assignedSlots" data-assignedSlots="{{ assignedSlots|json_encode }}"></div>
    <div class="js-assignedSlotsInfo" data-assignedSlotsInfo="{{ assignedSlotsInfo|json_encode }}"></div>

    {# View Asset Modal #}
    <div class="modal fade" tabindex="-1" id="modal-checkin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    {{ form_start(form, { 'attr': { 'class': 'form-floating' } }) }}
                    <input id="assignAssetId" type="hidden" name="assetId" value=""/>
                    <div class="modal-header">
                        <h4 class="modal-title">Assign User</h4>
                        <button name="closeModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body pl-2">
                        <div class="mb-3">
                            {{ form_label(form.user, 'Collected From') }}
                            {{ form_widget(form.user, { 'attr': { 'tabindex': 1, 'style': 'width:100%'}}) }}
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <div class="form-floating">
                                    {{ form_widget(form.device, { 'attr': { 'tabindex': 2, 'placeholder': 'Asset' }}) }}
                                    {{ form_label(form.device, 'Asset') }}
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-floating" data-bs-toggle="tooltip" data-bs-title="Double click to edit.">
                                    {# todo: on double click, enable field #}
                                    {# ondblclick="document.getElementById('asset_collection_location').disabled = false;"  #}
                                    {{ form_widget(form.location) }}
                                    {{ form_label(form.location, 'Location') }}
                                </div>
                            </div>
                        </div>
                        <div class="input-group">
                            {# Needs Repair #}
                            {{ form_widget(form.needsrepair, { 'attr': { 'class': 'btn-check'} }) }}
                            <label for="asset_collection_needsrepair" class="btn btn-outline-secondary" id="needsRepairLabel">Needs Repair</label>
                            {# Check Out #}
                            {{ form_widget(form.checkout, { 'attr': { 'class': 'btn-check'} }) }}
                            <label for="asset_collection_checkout" class="btn btn-outline-secondary">Check Out</label>
                            {# Processed #}
                            {{ form_widget(form.processed, { 'attr': { 'class': 'btn-check'} }) }}
                            <label for="asset_collection_processed" class="btn btn-outline-secondary">Processed</label>
                        </div>
                        <div class="my-2" id="partsNeeded">
                            {% for part in repairParts %}
                                <div class="form-check form-check-inline">
                                    <input id="{{ part.name }}" type="checkbox" class="form-check-input" value="{{ part.value }}" name="{{ part.name }}">
                                    <label for="{{ part.name }}" class="form-check-label">{{ part.name }}</label>
                                </div>
                            {% endfor %}
                        </div>
                        <div class="form-floating mt-sm-2">
                            {{ form_widget(form.notes, { 'attr': { 'tabindex': 4, 'rows': 3, 'style': 'height:100%;', 'placeholder': 'Notes' } }) }}
                            {{ form_label(form.notes) }}
                        </div>
                        {{ form_widget(form.userId) }}
                        {{ form_widget(form.assetId) }}
                    </div>
                    <div class="modal-footer justify-content-between">
                        {{ form_widget(form.clearLocation, {'label': 'Clear', 'attr': { 'class': 'btn btn-outline-secondary'}}) }}
                        {{ form_widget(form.Collect, {'label': 'Update', 'attr': { 'tabindex': 3, 'class': 'btn btn-outline-success'}}) }}
                    </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
    {# ./viewAssetModal #}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .cellOccupied {
            background-color: {{ colors.cellOccupied }} !important;
        }

        .cellCheckedOut {
            background-color: {{ colors.cellCheckedOut }} !important;
        }

        .cellProcessed {
            background-color: {{ colors.cellProcessed }} !important;
        }

        .cellHasRepair {
            background-color: {{ colors.cellHasRepair }} !important;
        }

        .storageSides {
            padding: 10px;
            border: 1px #000 solid;
            border-radius: 5px;
            background-color: #343a40;
        }

        .storageSide .storageRow:last-child {
            margin: 0;
        }

        .storageCell {
            background-color: #4e555c;
            font-size: 0.85rem;
        }

        .storageCell a {
            color: #fff;
        }

        .my-asset-collection-btn {
            width: 11px;
            height: 11px;
            padding: 0;
            margin: 0;
            border: 0 none transparent;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('select2') }}
    <script type="text/javascript">
        $(document).ready(function() {
            // Populate cells that are assigned
            const assignedSlots = JSON.parse($(".js-assignedSlots").attr("data-assignedSlots"));
            const assignedSlotsInfo = JSON.parse($(".js-assignedSlotsInfo").attr("data-assignedSlotsInfo"));

            /**
             * .urlParam
             * Check for GET in uri
             * @param name
             * @returns {string|number}
             */
            $.urlParam = function(name){
                var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
                return results[1] || 0;
            }

            // Parts needed hide/show
            let partsNeededDiv = $("#partsNeeded")
            let partsNeededTrigger = $("#asset_collection_needsrepair");

            partsNeededDiv.hide();

            partsNeededTrigger.on("click", function() {
                if ($(this).is(':checked')) {
                    partsNeededDiv.show();
                } else {
                    partsNeededDiv.hide();
                }
            });

            // Set the checkIn Modal
            $("#modal-checkin").on("show.bs.modal", function(e) {
                let storageSlot = $(e.relatedTarget).attr("data-slot");
                let asset = $(e.relatedTarget).attr("data-asset") ?? '';
                let assignedUserId = $(e.relatedTarget).attr("data-user") ?? null;
                let note = $(e.relatedTarget).attr("data-note") ?? '';
                let checkedOut = $(e.relatedTarget).attr("data-checkedout") ?? null;
                let processed = $(e.relatedTarget).attr("data-processed") ?? null;
                let hasRepair = $(e.relatedTarget).attr("data-hasrepair") ?? null;
                let repairId = $(e.relatedTarget).attr("data-repairid") ?? null;
                // let locationEntity = document.getElementById('asset_collection_location');

                setTimeout(function () {
                    $("#asset_collection_user").focus();
                }, 600);

                document.getElementById("asset_collection_device").setAttribute("value", asset);
                document.getElementById("asset_collection_notes").innerText = note;
                $("#asset_collection_user").val(assignedUserId).trigger("change");
                document.getElementById("asset_collection_userId").setAttribute("value", assignedUserId);
                document.getElementById("asset_collection_location").setAttribute("value", storageSlot);
                $("#clearLocation").attr("value", storageSlot);

                if (checkedOut != null) {
                    document.getElementById("asset_collection_checkout").checked = true;
                } else {
                    document.getElementById("asset_collection_checkout").checked = false;
                }

                if (processed != null) {
                    document.getElementById("asset_collection_processed").checked = true;
                } else {
                    document.getElementById("asset_collection_processed").checked = false;
                }

                if (hasRepair == "true") {
                    $("#needsRepairLabel").text("Has Repair");
                    $("#asset_collection_needsrepair").prop("disabled", true).prop("checked", true);

                    {#let url = "{{ path('app_repair_show', { id: 'repairId' }) }}";#}
                    {#url = url.replace("repairId", repairId);#}
                    {#window.location.replace(url);#}

                    // TODO: Add button to view repair
                } else {
                    $("#needsRepairLabel").text("Needs Repair");
                    $("#asset_collection_needsrepair").prop("disabled", false).prop("checked", false);
                    // $("#asset_collection_needsrepair").attr("onclick", "").unbind("click");
                }

                // When disabled, returns NULL post. no good
                // locationEntity..css('disabled', true);
                // $("asset_collection_location").on('blur', function() {
                //     $("asset_collection_location").prop( "disabled", true);
                // });
                if ({{ storageLocked }}) {
                    $(":input").not("[name=moderationMenu]").not("[name=closeModal]").prop("disabled", true);
                }
            });

            function clear_form_elements(class_name) {
                jQuery("#"+class_name).find(':input').each(function() {
                    switch(this.type) {
                        case 'password':
                        case 'text':
                        case 'textarea':
                        case 'file':
                        case 'select-one':
                        case 'select-multiple':
                        case 'date':
                        case 'number':
                        case 'tel':
                        case 'email':
                            jQuery(this).val('');
                            break;
                        case 'checkbox':
                        case 'radio':
                            this.checked = false;
                            break;
                    }
                });
            }

            $("#modal-checkin").on("hide.bs.modal", function(e) {
                document.getElementById("asset_collection_userId").removeAttribute("value");
                document.getElementById("asset_collection_user").removeAttribute("value");
                document.getElementById("asset_collection_location").removeAttribute("value");
                document.getElementById("asset_collection_notes").removeAttribute("value");
                document.getElementById("asset_collection_needsrepair").checked = false;
                document.getElementById("asset_collection_checkout").checked = false;
                document.getElementById("asset_collection_processed").checked = false;
                //clear_form_elements("modal-checkin");
            });

            // Start select2
            $("#asset_collection_user").select2({
                placeholder: 'Select a user',
                width: 'resolve',
                theme: 'bootstrap-5',
                dropdownParent: $("#modal-checkin")
            });

            $(document).on('select2:open', () => {
                document.querySelector('.select2-search__field').focus();
            });

            $("div[id='storageContainerRow']").children('.storageCell').each(function() {
                if (assignedSlots.includes($(this).attr('id').replace('slot-', ''))) {
                    $(this).addClass('cellOccupied');
                    var i;
                    for (i = 0; i < assignedSlotsInfo.length; ++i) {
                        if (assignedSlotsInfo[i]['slot'] === $(this).attr('id').replace('slot-', '')) {
                            if (assignedSlotsInfo[i]['hasRepair']) {
                                $(this).addClass('cellHasRepair')
                            }
                            if (assignedSlotsInfo[i]['checkedOut']) {
                                $(this).addClass('cellCheckedOut')
                            }
                            if (assignedSlotsInfo[i]['processed']) {
                                $(this).addClass('cellProcessed')
                            }
                        }
                    }
                    $(this).children('a').children('span').each(function() {
                        for (i = 0; i < assignedSlotsInfo.length; ++i) {
                            if (assignedSlotsInfo[i]['slot'] === $(this).attr('data-slot')) {
                                $(this).attr('data-asset', assignedSlotsInfo[i]['asset']);
                                $(this).attr('data-user', assignedSlotsInfo[i]['user']);
                                $(this).attr('data-note', assignedSlotsInfo[i]['note']);
                                $(this).attr('data-checkedout', assignedSlotsInfo[i]['checkedOut']);
                                $(this).attr('data-processed', assignedSlotsInfo[i]['processed']);
                                $(this).attr('data-hasrepair', assignedSlotsInfo[i]['hasRepair']);
                                $(this).attr('data-repairId', assignedSlotsInfo[i]['repairId']);
                                $("#href-slot-" + assignedSlotsInfo[i]['slot']).attr('data-bs-title', assignedSlotsInfo[i]['slot'] + '<br />' + assignedSlotsInfo[i]['asset'] + '<br />' + assignedSlotsInfo[i]['usersName']);
                            }
                        }
                    })
                }
            });

            // // Enable Tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

            // Check if 'slot' was passed in GET
            if ($.urlParam('slot')) {
                let slotNumber = $.urlParam('slot');
                let slotElementId = "#slotNumber-" + slotNumber;

                console.log('Opening Slot: ' + slotNumber);
                let selector = $(slotElementId);

                // Open the Modal
                selector.click();
            }
        });
    </script>
    {# end:custom js #}
{% endblock %}
