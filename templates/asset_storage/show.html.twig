{% extends 'base.html.twig' %}
{% block body %}
    <div class="row">
        <div class="col">
            <blockquote class="blockquote">
                <h1 class="fw-bolder text-light">{{ assetStorage.name }}</h1>
            </blockquote>
            {% if assetStorage.description is not null %}
                <figcaption class="blockquote-footer">
                    {{ assetStorage.description }}
                </figcaption>
            {% endif %}
        </div>
        {% if storageLocked == 'true' %}
            <div class="col">
                <div class="alert alert-warning">
                    <i class="fa fa-lock mr-2"></i> Storage Locked
                </div>
            </div>
        {% endif %}
        <div class="col text-end">
            {{ render(controller('App\\Controller\\StorageModerationController::renderModerationButton', {id: assetStorage.id})) }}

        </div>
    </div>
    {% if assetStorage.location is not null %}
        <div class="row">
            <div class="col">
                <span>Located at: {{ assetStorage.location }}</span>
            </div>
        </div>
    {% endif %}
    <div class="row">
        {% include 'asset_storage/storage_parts/storage.html.twig' with storageData %}
    </div>
    <div class="container-fluid">
        <p class="text-right">
            {% for counts in storageCounts %}
                 <strong>{{ counts.collected }}</strong> / {{ counts.total }}
            {% endfor %}
        </p>
    </div>
    {% set assignedSlots = [] %}
    {% set assignedSlotsInfo = [] %}
    {% for collectedAsset in collectedAssets %}
        {% set assignedSlots = assignedSlots|merge([collectedAsset.slot]) %}
        {% set assignedSlotsInfo = assignedSlotsInfo|merge([{
            user: collectedAsset.user,
            slot: collectedAsset.slot,
            asset: collectedAsset.asset_tag,
            note: collectedAsset.note,
            checkedOut: collectedAsset.checkedOut,
            processed: collectedAsset.processed,
            usersName: collectedAsset.usersName,
            hasRepair: collectedAsset.hasRepair,
            repairId: collectedAsset.repairId,
            repairPartsNeeded: collectedAsset.repairPartsNeeded,
            serialnumber: collectedAsset.serial_number,
        }]) %}
    {% endfor %}
    <div class="js-assignedSlots" data-assignedSlots="{{ assignedSlots|json_encode }}"></div>
    <div class="js-assignedSlotsInfo" data-assignedSlotsInfo="{{ assignedSlotsInfo|json_encode }}"></div>

    {# View Asset Modal #}
    <div class="modal fade" tabindex="-1" id="modal-checkin">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    {{ form_start(form, { 'attr': { 'class': 'form-floating' } }) }}
                        <input id="assignAssetId" type="hidden" name="assetId" value=""/>
                        <div class="modal-header">
                            <h4 class="modal-title">Location: <span id="modalLocationNumber"></span></h4>
                            <button name="closeModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body pl-2">
                            <div class="mb-3">
                                {{ form_label(form.assigned_to, 'Collected From') }}
                                {{ form_widget(form.assigned_to, { 'attr': { 'tabindex': 1, 'style': 'width:100%'}}) }}
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <div class="form-floating">
                                        {{ form_widget(form.asset_tag, { 'attr': { 'tabindex': 2, 'placeholder': 'Asset Tag' }}) }}
                                        {{ form_label(form.asset_tag, 'Asset Tag') }}
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating" data-bs-toggle="tooltip" data-bs-title="Double click to edit.">
                                        {{ form_widget(form.serial_number, { 'attr': { 'placeholder': 'Serial Number' }}) }}
                                        {{ form_label(form.serial_number, 'Serial Number') }}
                                    </div>
                                </div>
                            </div>
                            <div class="input-group">
                                {# Needs Repair #}
                                {{ form_widget(form.needs_repair, { 'attr': { 'class': 'btn-check'} }) }}
                                <label for="asset_collection_needs_repair" class="btn btn-outline-secondary" id="needsRepairLabel">Needs Repair</label>
                                {# Check Out #}
                                {{ form_widget(form.check_out, { 'attr': { 'class': 'btn-check'} }) }}
                                <label for="asset_collection_check_out" class="btn btn-outline-secondary">Check Out</label>
                                {# Processed #}
                                {{ form_widget(form.processed, { 'attr': { 'class': 'btn-check'} }) }}
                                <label for="asset_collection_processed" class="btn btn-outline-secondary">Processed</label>
                            </div>
                            <div class="my-2" id="partsNeeded">
                                <a href="" id="viewRepairLink">View Repair</a>
                                {{ form_widget(form.repairPartsNeeded) }}
                            </div>
                            <div class="form-floating mt-sm-2">
                                {{ form_widget(form.notes, { 'attr': { 'tabindex': 4, 'rows': 3, 'style': 'height:100%;', 'placeholder': 'Notes' } }) }}
                                {{ form_label(form.notes) }}
                            </div>
                            {{ form_widget(form.userId) }}
                            {{ form_widget(form.assetId) }}
                            {{ form_widget(form.storageId, { 'attr': { 'value': storageId } }) }}
                            {{ form_widget(form.location) }}
                        </div>
                        <div class="modal-footer justify-content-between">
                            {{ form_widget(form.clearLocation, {'label': 'Clear', 'attr': { 'class': 'btn btn-outline-secondary'}}) }}
                            {{ form_widget(form.Collect, {'label': 'Update', 'attr': { 'tabindex': 3, 'class': 'btn btn-outline-success'}}) }}
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
    {# ./viewAssetModal #}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .cellOccupied {
            background-color: {{ colors.cellOccupied }} !important;
        }

        .cellCheckedOut {
            background-color: {{ colors.cellCheckedOut }} !important;
        }

        .cellProcessed {
            background-color: {{ colors.cellProcessed }} !important;
        }

        .cellHasRepair {
            background-color: {{ colors.cellHasRepair }} !important;
        }

        .storage {
            background-color: #515154;
            padding: 1px;
        }

        .storageSides {
            padding: 10px;
            border: 1px #000 solid;
            border-radius: 5px;
            background-color: #343a40;
        }

        .storageSide .storageRow:last-child {
            margin: 0;
        }

        .storageCell {
            background-color: #4e555c;
            font-size: 0.85rem;
        }

        .storageCell a {
            color: #fff;
        }

        .my-asset-collection-btn {
            width: 11px;
            height: 11px;
            padding: 0;
            margin: 0;
            border: 0 none transparent;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('select2') }}
    <script type="text/javascript">
        $(document).ready(function() {
            // Populate cells that are assigned
            const assignedSlotsInfo = JSON.parse($(".js-assignedSlotsInfo").attr("data-assignedSlotsInfo"));

            // Parts needed hide/show
            let partsNeededDiv = $("#partsNeeded")
            let partsNeededTrigger = $("#asset_collection_needs_repair");

            partsNeededDiv.hide();

            partsNeededTrigger.on("click", function() {
                if ($(this).is(':checked')) {
                    partsNeededDiv.show();
                } else {
                    partsNeededDiv.hide();
                }
            });

            // Set the checkIn Modal
            $("#modal-checkin").on("show.bs.modal", function(e) {
                let storageSlot = $(e.relatedTarget).attr("data-slot");
                let asset = $(e.relatedTarget).attr("data-asset") ?? '';
                let serialnumber = $(e.relatedTarget).attr("data-serialnumber") ?? '';
                let assignedUserId = $(e.relatedTarget).attr("data-user") ?? null;
                let note = $(e.relatedTarget).attr("data-note") ?? '';
                let checkedOut = $(e.relatedTarget).attr("data-checkedout") ?? null;
                let processed = $(e.relatedTarget).attr("data-processed") ?? null;
                let hasRepair = $(e.relatedTarget).attr("data-hasrepair") ?? null;
                let repairId = $(e.relatedTarget).attr("data-repairid") ?? null;
                let repairPartsNeeded = $(e.relatedTarget).attr("data-repairParts") ?? null;

                if (repairPartsNeeded) {
                    repairPartsNeeded = JSON.parse(repairPartsNeeded);
                }

                setTimeout(function () {
                    $("#asset_collection_assigned_to").focus();
                }, 600);

                $("#asset_collection_asset_tag").val(asset);
                $("#asset_collection_serial_number").val(serialnumber);
                $("#asset_collection_notes").val(note);
                $("#asset_collection_assigned_to").val(assignedUserId).trigger("change");
                $("#asset_collection_userId").val(assignedUserId);
                $("#asset_collection_location").val(storageSlot);
                $("#modalLocationNumber").text(storageSlot);
                $("#clearLocation").attr("value", storageSlot);

                if (checkedOut === "true") {
                    $("#asset_collection_check_out").prop("checked", true);
                }

                if (processed === "true") {
                    $("#asset_collection_processed").prop("checked", true);
                }

                if (hasRepair === "true") {
                    // Change the input:checkbox text and trigger its click event to expand
                    $("#needsRepairLabel").text("Has Repair");
                    partsNeededTrigger.trigger('click');

                    // Set the View Repair link href
                    let url = "{{ app.request.getSchemeAndHttpHost() }}{{ path('app_repair_show', { id: 'repairId' }) }}";
                    url = url.replace("repairId", repairId);
                    $("#viewRepairLink").attr("href", url);

                    // Populate checkboxes for repair items needed
                    repairPartsNeeded.forEach(async (part) => {
                       $("#asset_collection_repairPartsNeeded_" + part.id).prop("checked", true);
                    });

                } else {
                    $("#needsRepairLabel").text("Needs Repair");
                    $("#asset_collection_needs_repair").prop("disabled", false).prop("checked", false);
                    // $("#asset_collection_needsrepair").attr("onclick", "").unbind("click");
                }

                // TODO IDE says this conditional is unreachable, don't know why because it works
                // Disable all form elements if storage is locked
                if ({{ storageLocked }}) {
                    $(":input").not("[name=moderationMenu]").not("[name=closeModal]").prop("disabled", true);
                }
            });

            // On modal hide, remove all values from inputs
            $("#modal-checkin").on("hide.bs.modal", function() {
                $(this)
                    .find("input,textarea,select")
                        .val("").end()
                    .find("input[type=checkbox], input[type=radio]")
                        .prop("checked", false).end();

                partsNeededDiv.hide();
            });

            $("#asset_collection_assigned_to").select2({
                placeholder: 'Select a user',
                width: 'resolve',
                theme: 'bootstrap-5',
                dropdownParent: $("#modal-checkin")
            });

            // Set assigned_to as required, have to do it here because select2 overrides the select
            $("#asset_collection_assigned_to").prop("required", true);

            $(document).on('select2:open', () => {
                document.querySelector('.select2-search__field').focus();
            });

            // Populate all data tags
            assignedSlotsInfo.forEach(async (slot) => {
                let slotId = "#slot-" + slot.slot;

                $(slotId).children("a").children("span").each(function() {
                   $("#slotNumber-" + slot.slot)
                       .attr("data-asset", slot.asset)
                       .attr("data-serialnumber", slot.serialnumber)
                       .attr("data-user", slot.user)
                       .attr("data-note", slot.note)
                       .attr("data-checkedout", slot.checkedOut)
                       .attr("data-processed", slot.processed)
                       .attr("data-hasrepair", slot.hasRepair)
                       .attr("data-repairId", slot.repairId)
                       .attr("data-location", slot.location)
                       .attr("data-repairParts", slot.repairPartsNeeded)
                    ;

                   // Add tooltip to a tag
                    $("#href-slot-" + slot.slot).attr('data-bs-title', slot.slot + '<br />' + slot.asset + '<br />' + slot.userName);
                });

                // Set proper css classes for occupied and altered cells
                $(slotId).addClass("cellOccupied");

                if (slot.processed) {
                    $(slotId).addClass("cellProcessed");
                }

                if (slot.checkedOut) {
                    $(slotId).addClass("cellCheckedOut");
                }

                if (slot.hasRepair) {
                    $(slotId).addClass("cellHasRepair");
                }
            });

            // TODO Not currently working, need to look at it again
            // Enable Tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        });
    </script>
    {# end:custom js #}
{% endblock %}
